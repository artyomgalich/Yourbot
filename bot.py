import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from config import TOKEN
from utils.pdf_generator import generate_pdf
import os

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üìÑ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤—É"), KeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞"))

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ –≤ –Æ—Ä–ë–æ—Ç—ñ! –°—Ç–≤–æ—Ä—é–π—Ç–µ —é—Ä–∏–¥–∏—á–Ω—ñ –∑–∞—è–≤–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å: üìÑ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤—É",
        reply_markup=main_kb
    )

@dp.message_handler(lambda msg: msg.text == "‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞")
async def about(message: types.Message):
    await message.answer("üßæ –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–∞–≥–∞—î —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –æ—Ñ—ñ—Ü—ñ–π–Ω—ñ –∑–∞—è–≤–∏ —É PDF. –°—Ç–∞–Ω—å—Ç–µ —é—Ä–∏–¥–∏—á–Ω–æ –∑–∞—Ö–∏—â–µ–Ω–∏–º ‚Äî —à–≤–∏–¥–∫–æ —Ç–∞ –∑—Ä—É—á–Ω–æ.")

@dp.message_handler(lambda msg: msg.text == "üìÑ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤—É")
async def choose_type(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–û–°–ë–ë"), KeyboardButton("–¶–ù–ê–ü"), KeyboardButton("–ü–æ–ª—ñ—Ü—ñ—è"))
    kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞—è–≤–∏:", reply_markup=kb)

@dp.message_handler(lambda msg: msg.text in ["–û–°–ë–ë", "–¶–ù–ê–ü", "–ü–æ–ª—ñ—Ü—ñ—è"])
async def get_data(message: types.Message):
    await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ü–Ü–ë:")
    dp.register_message_handler(get_name, state=message.text)

user_data = {}

async def get_name(message: types.Message):
    user_data[message.from_user.id] = {"name": message.text}
    await message.answer("üìç –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É:")

    dp.register_message_handler(get_address, state="address")

async def get_address(message: types.Message):
    user_data[message.from_user.id]["address"] = message.text
    await message.answer("üìù –û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∫–æ—Ä–æ—Ç–∫–æ:")

    dp.register_message_handler(generate_zayava, state="problem")

async def generate_zayava(message: types.Message):
    user_data[message.from_user.id]["problem"] = message.text

    # PDF –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è
    uid = message.from_user.id
    name = user_data[uid]["name"]
    address = user_data[uid]["address"]
    problem = user_data[uid]["problem"]

    pdf_path = generate_pdf(name, address, problem)

    with open(pdf_path, "rb") as doc:
        await message.answer_document(doc, caption="‚úÖ –û—Å—å –≤–∞—à–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ –∑–∞—è–≤–∞ (—á–µ—Ä–Ω–µ—Ç–∫–∞).")

    os.remove(pdf_path)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
